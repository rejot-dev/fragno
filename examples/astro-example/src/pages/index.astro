---
import { createExampleFragment } from "@rejot-dev/example-fragment";

const exampleFragment = createExampleFragment();
const initialData = exampleFragment.services.getData();
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Astro Fragno Example Fragment</title>
  </head>
  <body>
    <div style="padding: 20px; font-family: monospace; max-width: 800px; margin: 0 auto">
      <h1>Astro Fragno Example Fragment</h1>
      <p>Simple data reading with example-fragment</p>

      <div style="margin-bottom: 30px">
        <h2>Current Data</h2>
        <div
          id="data-display"
          style="padding: 15px; background-color: #f5f5f5; border-radius: 5px; border: 1px solid #ddd"
        >
          {initialData}
        </div>
      </div>

      <div style="margin-top: 30px; font-size: 14px; color: #666">
        <h3>Available Endpoints:</h3>
        <ul>
          <li>GET /api/example-fragment/hello - Hello World</li>
          <li>GET /api/example-fragment/data - Retrieve current data</li>
          <li>POST /api/example-fragment/sample - Mutate data</li>
        </ul>
      </div>

      <div style="margin-top: 30px; font-size: 14px; color: #666; display: flex; gap: 10px">
        <button id="mutateBtn">Click me to mutate data</button>
        <button id="mutateErrorBtn">Click me to mutate data with error</button>
      </div>

      <div
        id="success-message"
        style="margin-top: 15px; padding: 10px; background-color: #d4edda; border: 1px solid #c3e6cb; border-radius: 5px; display: none;"
      >
        <p id="success-text">Success! Data:</p>
      </div>

      <div
        id="error-message"
        style="margin-top: 15px; padding: 10px; background-color: #f8d7da; border: 1px solid #f5c6cb; border-radius: 5px; display: none;"
      >
        <p id="error-text">Error:</p>
      </div>
    </div>

    <script>
      // Client-side JavaScript for interactivity
      import { createExampleFragmentClient } from "@rejot-dev/example-fragment";
      import { useFragno } from "@rejot-dev/fragno/vanilla";

      const exampleFragmentClient = createExampleFragmentClient();
      const { useData, useSampleMutator } = useFragno(exampleFragmentClient);

      // Initialize client-side data hook
      const dataHook = useData();
      const sampleMutator = useSampleMutator();

      dataHook.subscribe(({ data, loading, error }) => {
        console.log("dataHook.subscribe", { data, loading, error });
        const dataDisplay = document.getElementById("data-display");
        if (dataDisplay) {
          dataDisplay.textContent = data || "";
        }
      });

      // Subscribe to mutator state changes
      sampleMutator.subscribe((mutatorState) => {
        console.log("sampleMutator.subscribe", { mutatorState });
        const mutateBtn = document.getElementById("mutateBtn") as HTMLButtonElement;
        const mutateErrorBtn = document.getElementById("mutateErrorBtn") as HTMLButtonElement;

        if (mutateBtn) {
          setButtonLoading(mutateBtn, mutatorState.loading || false);
        }
        if (mutateErrorBtn) {
          setButtonLoading(mutateErrorBtn, mutatorState.loading || false);
        }

        // Show success message if we have data
        if (mutatorState.data) {
          showSuccess(mutatorState.data);
          dataHook.refetch();
        }

        // Show error if we have an error
        if (mutatorState.error) {
          showError(mutatorState.error);
        }
      });

      // Helper functions for UI updates
      function showSuccess(message: string) {
        const successDiv = document.getElementById("success-message");
        const successText = document.getElementById("success-text");
        const errorDiv = document.getElementById("error-message");

        if (successText) {
          successText.textContent = `Success! Data: ${message}`;
        }
        if (successDiv) {
          successDiv.style.display = "block";
        }
        if (errorDiv) {
          errorDiv.style.display = "none";
        }
      }

      function showError(error: { message: string; code: string }) {
        const errorDiv = document.getElementById("error-message");
        const errorText = document.getElementById("error-text");
        const successDiv = document.getElementById("success-message");

        if (errorText) {
          errorText.textContent = `Error: ${error.message} (code: ${error.code})`;
        }
        if (errorDiv) {
          errorDiv.style.display = "block";
        }
        if (successDiv) {
          successDiv.style.display = "none";
        }
      }

      function setButtonLoading(button: HTMLButtonElement, loading: boolean) {
        button.disabled = loading;
        const originalText = button.getAttribute("data-original-text") || button.textContent || "";
        button.textContent = loading ? "Saving..." : originalText;
      }

      // Setup buttons
      const mutateBtn = document.getElementById("mutateBtn") as HTMLButtonElement;
      const mutateErrorBtn = document.getElementById("mutateErrorBtn") as HTMLButtonElement;

      if (mutateBtn) {
        mutateBtn.setAttribute("data-original-text", "Click me to mutate data");
        mutateBtn.addEventListener("click", async () => {
          const { data: currentData } = dataHook.get();
          await sampleMutator.mutate({
            body: { message: (currentData || "") + "!" },
            params: {},
          });
          dataHook.refetch();
        });
      }

      if (mutateErrorBtn) {
        mutateErrorBtn.setAttribute("data-original-text", "Click me to mutate data with error");
        mutateErrorBtn.addEventListener("click", async () => {
          await sampleMutator.mutate({
            body: { message: "123" },
            params: {},
          });
        });
      }
    </script>
  </body>
</html>
