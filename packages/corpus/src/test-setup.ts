import { writeFileSync, mkdirSync } from "node:fs";
import { join, dirname } from "node:path";
import { fileURLToPath } from "node:url";
import { loadAllSubjects } from "./parser";

const __dirname = fileURLToPath(new URL(".", import.meta.url));
const TEMP_TEST_DIR = join(__dirname, "../.corpus-tests");

/**
 * Global setup for vitest that parses all markdown files
 * and generates temporary test files from @fragno-test blocks
 */
export async function setup() {
  // Create temp directory (if it doesn't exist)
  mkdirSync(TEMP_TEST_DIR, { recursive: true });

  try {
    // Load all subjects
    const subjects = loadAllSubjects();

    // Generate test files for each subject
    for (const subject of subjects) {
      // Skip test generation if examples contain declare statements (documentation only)
      const allCode = subject.examples.map((example) => example.code).join("\n");
      if (allCode.includes("declare ")) {
        console.log(`⊘ Skipped ${subject.id} (contains declare statements - documentation only)`);
        continue;
      }

      // Separate examples by test type
      const routeTests = subject.examples.filter((ex) => ex.testType === "route");
      const databaseTests = subject.examples.filter((ex) => ex.testType === "database");

      // Skip if no actual tests
      if (routeTests.length === 0 && databaseTests.length === 0) {
        console.log(`⊘ Skipped ${subject.id} (no test directives found)`);
        continue;
      }

      const testFileName = `${subject.id}.generated.test.ts`;
      const testFilePath = join(TEMP_TEST_DIR, testFileName);

      // Generate test file content
      let testFileContent = `/* eslint-disable */
// Auto-generated test file for subject: ${subject.title}
// DO NOT EDIT - This file is generated by test-setup.ts

import { describe, it, expect } from "vitest";
${subject.imports}

${subject.init ? `${subject.init}\n` : ""}
`;

      // Generate route tests
      if (routeTests.length > 0) {
        testFileContent += `\ndescribe("${subject.id} - route tests", () => {\n`;

        for (let i = 0; i < routeTests.length; i++) {
          const example = routeTests[i];
          const testName = example.testName || `route test ${i + 1}`;

          testFileContent += `  it("${testName}", () => {\n`;
          // Indent the code
          const indentedCode = example.code
            .split("\n")
            .map((line) => `    ${line}`)
            .join("\n");
          testFileContent += `${indentedCode}\n`;
          testFileContent += `  });\n\n`;
        }

        testFileContent += `});\n`;
      }

      // Generate database tests
      if (databaseTests.length > 0) {
        testFileContent += `\ndescribe("${subject.id} - database tests", () => {\n`;

        for (let i = 0; i < databaseTests.length; i++) {
          const example = databaseTests[i];
          const testName = example.testName || `database test ${i + 1}`;

          testFileContent += `  it("${testName}", async () => {\n`;
          // Indent the code
          const indentedCode = example.code
            .split("\n")
            .map((line) => `    ${line}`)
            .join("\n");
          testFileContent += `${indentedCode}\n`;
          testFileContent += `  });\n\n`;
        }

        testFileContent += `});\n`;
      }

      // Ensure directory exists
      mkdirSync(dirname(testFilePath), { recursive: true });

      // Write test file
      writeFileSync(testFilePath, testFileContent, "utf-8");
    }

    console.log(`✓ Generated ${subjects.length} test file(s) in ${TEMP_TEST_DIR}`);
  } catch (error) {
    if (error instanceof Error) {
      console.error("Error generating test files:", error.message);
    }
    // Don't throw - allow tests to continue even if generation fails
  }
}
