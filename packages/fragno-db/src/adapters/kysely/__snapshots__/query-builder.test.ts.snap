// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`query-builder > queryCompiler > count > should compile count query with where clause 1`] = `"select count(*) as "count" from "users" where "users"."isActive" = $1"`;

exports[`query-builder > queryCompiler > count > should compile count query without where clause 1`] = `"select count(*) as "count" from "users""`;

exports[`query-builder > queryCompiler > create > should compile insert query for mssql 1`] = `"insert into "users" ("id", "name", "email") output "inserted"."id" as "id", "inserted"."name" as "name", "inserted"."email" as "email", "inserted"."age" as "age", "inserted"."isActive" as "isActive", "inserted"."createdAt" as "createdAt" values ($1, $2, $3)"`;

exports[`query-builder > queryCompiler > create > should compile insert query for postgresql 1`] = `"insert into "users" ("id", "name", "email") values ($1, $2, $3) returning "users"."id" as "id", "users"."name" as "name", "users"."email" as "email", "users"."age" as "age", "users"."isActive" as "isActive", "users"."createdAt" as "createdAt""`;

exports[`query-builder > queryCompiler > create > should compile insert query for sqlite 1`] = `"insert into "users" ("id", "name", "email") values ($1, $2, $3) returning "users"."id" as "id", "users"."name" as "name", "users"."email" as "email", "users"."age" as "age", "users"."isActive" as "isActive", "users"."createdAt" as "createdAt""`;

exports[`query-builder > queryCompiler > createMany > should compile bulk insert query 1`] = `"insert into "users" ("id", "name", "email") values ($1, $2, $3), ($4, $5, $6)"`;

exports[`query-builder > queryCompiler > createMany > should handle many records 1`] = `"insert into "users" ("id", "name", "email") values ($1, $2, $3), ($4, $5, $6), ($7, $8, $9)"`;

exports[`query-builder > queryCompiler > createMany > should handle single record in array 1`] = `"insert into "users" ("id", "name", "email") values ($1, $2, $3)"`;

exports[`query-builder > queryCompiler > deleteMany > should compile delete query with complex where 1`] = `"delete from "users" where ("users"."isActive" = $1 and "users"."age" < $2)"`;

exports[`query-builder > queryCompiler > deleteMany > should compile delete query with where 1`] = `"delete from "users" where "users"."isActive" = $1"`;

exports[`query-builder > queryCompiler > deleteMany > should compile delete query without where 1`] = `"delete from "users""`;

exports[`query-builder > queryCompiler > findById > should compile find by id query 1`] = `"select "users"."id" as "id", "users"."name" as "name", "users"."email" as "email", "users"."age" as "age", "users"."isActive" as "isActive", "users"."createdAt" as "createdAt" from "users" where "id" = $1 limit $2"`;

exports[`query-builder > queryCompiler > findById > should compile find by id query with numeric id 1`] = `"select "users"."id" as "id", "users"."name" as "name", "users"."email" as "email", "users"."age" as "age", "users"."isActive" as "isActive", "users"."createdAt" as "createdAt" from "users" where "id" = $1 limit $2"`;

exports[`query-builder > queryCompiler > findMany > should compile basic select query 1`] = `"select "users"."id" as "id", "users"."name" as "name" from "users""`;

exports[`query-builder > queryCompiler > findMany > should compile complete query with all options 1`] = `"select "users"."id" as "id", "users"."name" as "name", "users"."email" as "email" from "users" where ("users"."isActive" = $1 and "users"."age" >= $2) order by "users"."name" asc limit $3 offset $4"`;

exports[`query-builder > queryCompiler > findMany > should compile select all columns 1`] = `"select "users"."id" as "id", "users"."name" as "name", "users"."email" as "email", "users"."age" as "age", "users"."isActive" as "isActive", "users"."createdAt" as "createdAt" from "users""`;

exports[`query-builder > queryCompiler > findMany > should compile select with limit and offset 1`] = `"select "users"."id" as "id", "users"."name" as "name", "users"."email" as "email", "users"."age" as "age", "users"."isActive" as "isActive", "users"."createdAt" as "createdAt" from "users" limit $1 offset $2"`;

exports[`query-builder > queryCompiler > findMany > should compile select with multiple order by 1`] = `"select "users"."id" as "id", "users"."name" as "name", "users"."email" as "email", "users"."age" as "age", "users"."isActive" as "isActive", "users"."createdAt" as "createdAt" from "users" order by "users"."name" asc, "users"."age" desc"`;

exports[`query-builder > queryCompiler > findMany > should compile select with single order by 1`] = `"select "users"."id" as "id", "users"."name" as "name", "users"."email" as "email", "users"."age" as "age", "users"."isActive" as "isActive", "users"."createdAt" as "createdAt" from "users" order by "users"."name" asc"`;

exports[`query-builder > queryCompiler > findMany > should compile select with where clause 1`] = `"select "users"."id" as "id", "users"."name" as "name", "users"."email" as "email", "users"."age" as "age", "users"."isActive" as "isActive", "users"."createdAt" as "createdAt" from "users" where "users"."age" > $1"`;

exports[`query-builder > queryCompiler > findMany > should use TOP for mssql limit 1`] = `"select top(5) "users"."id" as "id", "users"."name" as "name", "users"."email" as "email", "users"."age" as "age", "users"."isActive" as "isActive", "users"."createdAt" as "createdAt" from "users""`;

exports[`query-builder > queryCompiler > updateMany > should compile update query with multiple fields 1`] = `"update "users" set "name" = $1, "email" = $2, "isActive" = $3 where "users"."isActive" = $4"`;

exports[`query-builder > queryCompiler > updateMany > should compile update query with where 1`] = `"update "users" set "name" = $1 where "users"."id" = $2"`;

exports[`query-builder > queryCompiler > updateMany > should compile update query without where 1`] = `"update "users" set "name" = $1"`;

exports[`query-builder > queryCompiler > upsertCheck > should compile upsert check query with where 1`] = `"select "id" as "id" from "users" where "users"."email" = $1 limit $2"`;

exports[`query-builder > queryCompiler > upsertCheck > should compile upsert check query without where 1`] = `"select "id" as "id" from "users" limit $1"`;

exports[`query-builder > queryCompiler > upsertUpdate > should compile upsert update query 1`] = `"update "users" set "name" = $1 where "users"."email" = $2"`;

exports[`query-builder > queryCompiler > upsertUpdate > should compile upsert update query with top 1`] = `"update top(1) "users" set "name" = $1 where "users"."email" = $2"`;

exports[`query-builder > queryCompiler > upsertUpdate > should compile upsert update query without where 1`] = `"update "users" set "name" = $1"`;

exports[`query-builder > queryCompiler > upsertUpdateById > should compile upsert update by id query 1`] = `"update "users" set "name" = $1 where "id" = $2"`;

exports[`query-builder > queryCompiler > upsertUpdateById > should compile upsert update by id with multiple fields 1`] = `"update "users" set "name" = $1, "email" = $2 where "id" = $3"`;
