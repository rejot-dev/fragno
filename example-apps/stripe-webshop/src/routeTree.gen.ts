/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ApiTodosRouteImport } from './routes/api/todos'
import { Route as AuthenticatedUsersRouteImport } from './routes/_authenticated/users'
import { Route as AuthenticatedStripeRouteImport } from './routes/_authenticated/stripe'
import { Route as AuthenticatedProfileRouteImport } from './routes/_authenticated/profile'
import { Route as AuthenticatedPlansRouteImport } from './routes/_authenticated/plans'
import { Route as AuthenticatedCheckoutRouteImport } from './routes/_authenticated/checkout'
import { Route as ApiSubscriptionStatusRouteImport } from './routes/api/subscription/status'
import { Route as ApiStripeSplatRouteImport } from './routes/api/stripe/$'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth/$'

const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiTodosRoute = ApiTodosRouteImport.update({
  id: '/api/todos',
  path: '/api/todos',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedUsersRoute = AuthenticatedUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedStripeRoute = AuthenticatedStripeRouteImport.update({
  id: '/stripe',
  path: '/stripe',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedProfileRoute = AuthenticatedProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedPlansRoute = AuthenticatedPlansRouteImport.update({
  id: '/plans',
  path: '/plans',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedCheckoutRoute = AuthenticatedCheckoutRouteImport.update({
  id: '/checkout',
  path: '/checkout',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const ApiSubscriptionStatusRoute = ApiSubscriptionStatusRouteImport.update({
  id: '/api/subscription/status',
  path: '/api/subscription/status',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiStripeSplatRoute = ApiStripeSplatRouteImport.update({
  id: '/api/stripe/$',
  path: '/api/stripe/$',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/checkout': typeof AuthenticatedCheckoutRoute
  '/plans': typeof AuthenticatedPlansRoute
  '/profile': typeof AuthenticatedProfileRoute
  '/stripe': typeof AuthenticatedStripeRoute
  '/users': typeof AuthenticatedUsersRoute
  '/api/todos': typeof ApiTodosRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/stripe/$': typeof ApiStripeSplatRoute
  '/api/subscription/status': typeof ApiSubscriptionStatusRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/checkout': typeof AuthenticatedCheckoutRoute
  '/plans': typeof AuthenticatedPlansRoute
  '/profile': typeof AuthenticatedProfileRoute
  '/stripe': typeof AuthenticatedStripeRoute
  '/users': typeof AuthenticatedUsersRoute
  '/api/todos': typeof ApiTodosRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/stripe/$': typeof ApiStripeSplatRoute
  '/api/subscription/status': typeof ApiSubscriptionStatusRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/_authenticated/checkout': typeof AuthenticatedCheckoutRoute
  '/_authenticated/plans': typeof AuthenticatedPlansRoute
  '/_authenticated/profile': typeof AuthenticatedProfileRoute
  '/_authenticated/stripe': typeof AuthenticatedStripeRoute
  '/_authenticated/users': typeof AuthenticatedUsersRoute
  '/api/todos': typeof ApiTodosRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/stripe/$': typeof ApiStripeSplatRoute
  '/api/subscription/status': typeof ApiSubscriptionStatusRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/signup'
    | '/checkout'
    | '/plans'
    | '/profile'
    | '/stripe'
    | '/users'
    | '/api/todos'
    | '/api/auth/$'
    | '/api/stripe/$'
    | '/api/subscription/status'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/signup'
    | '/checkout'
    | '/plans'
    | '/profile'
    | '/stripe'
    | '/users'
    | '/api/todos'
    | '/api/auth/$'
    | '/api/stripe/$'
    | '/api/subscription/status'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/login'
    | '/signup'
    | '/_authenticated/checkout'
    | '/_authenticated/plans'
    | '/_authenticated/profile'
    | '/_authenticated/stripe'
    | '/_authenticated/users'
    | '/api/todos'
    | '/api/auth/$'
    | '/api/stripe/$'
    | '/api/subscription/status'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LoginRoute: typeof LoginRoute
  SignupRoute: typeof SignupRoute
  ApiTodosRoute: typeof ApiTodosRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
  ApiStripeSplatRoute: typeof ApiStripeSplatRoute
  ApiSubscriptionStatusRoute: typeof ApiSubscriptionStatusRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/todos': {
      id: '/api/todos'
      path: '/api/todos'
      fullPath: '/api/todos'
      preLoaderRoute: typeof ApiTodosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/users': {
      id: '/_authenticated/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthenticatedUsersRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/stripe': {
      id: '/_authenticated/stripe'
      path: '/stripe'
      fullPath: '/stripe'
      preLoaderRoute: typeof AuthenticatedStripeRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/profile': {
      id: '/_authenticated/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthenticatedProfileRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/plans': {
      id: '/_authenticated/plans'
      path: '/plans'
      fullPath: '/plans'
      preLoaderRoute: typeof AuthenticatedPlansRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/checkout': {
      id: '/_authenticated/checkout'
      path: '/checkout'
      fullPath: '/checkout'
      preLoaderRoute: typeof AuthenticatedCheckoutRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/api/subscription/status': {
      id: '/api/subscription/status'
      path: '/api/subscription/status'
      fullPath: '/api/subscription/status'
      preLoaderRoute: typeof ApiSubscriptionStatusRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/stripe/$': {
      id: '/api/stripe/$'
      path: '/api/stripe/$'
      fullPath: '/api/stripe/$'
      preLoaderRoute: typeof ApiStripeSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedCheckoutRoute: typeof AuthenticatedCheckoutRoute
  AuthenticatedPlansRoute: typeof AuthenticatedPlansRoute
  AuthenticatedProfileRoute: typeof AuthenticatedProfileRoute
  AuthenticatedStripeRoute: typeof AuthenticatedStripeRoute
  AuthenticatedUsersRoute: typeof AuthenticatedUsersRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedCheckoutRoute: AuthenticatedCheckoutRoute,
  AuthenticatedPlansRoute: AuthenticatedPlansRoute,
  AuthenticatedProfileRoute: AuthenticatedProfileRoute,
  AuthenticatedStripeRoute: AuthenticatedStripeRoute,
  AuthenticatedUsersRoute: AuthenticatedUsersRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LoginRoute: LoginRoute,
  SignupRoute: SignupRoute,
  ApiTodosRoute: ApiTodosRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
  ApiStripeSplatRoute: ApiStripeSplatRoute,
  ApiSubscriptionStatusRoute: ApiSubscriptionStatusRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
